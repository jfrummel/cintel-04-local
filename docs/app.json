[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui, render\nfrom shiny import reactive, req\nfrom shinywidgets import render_plotly, render_widget\nimport pandas as pd\nimport palmerpenguins\nimport seaborn as sns\nfrom shinyswatch import theme\n\n\n\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(\n    title=\"Jeremy's Penguin Interactive App\", fillable=True, theme=theme.cyborg\n)\n\nwith ui.sidebar(position=\"left\", open=\"open\", bg=\"f8f8f8\"):\n    ui.h2(\"Sidebar\", style=\"text-align: center;\", bg=\"#0a0a0a\")\n    ui.input_selectize(\n        \"selected_attribute_list\",\n        \"Attribute\",\n        choices={\"bill_length_mm\": \"Bill Length (mm)\", \"bill_depth_mm\": \"Bill Depth (mm)\", \"flipper_length_mm\": \"Flipper Length (mm)\", \"body_mass_g\": \"Body Mass (g)\"},\n    )\n\n    \n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Count\", value=25)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bins\", 1, 100, 50)\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Species\",\n        choices=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=\"Adelie\",\n        inline=False,\n    )\n    ui.input_checkbox_group(\n        \"selected_islands_list\",\n        \"Islands\",\n        choices=[\"Torgersen\", \"Dream\", \"Biscoe\"],\n        selected=[\"Torgersen\", \"Dream\", \"Biscoe\"],\n        inline=False,\n    )\n    ui.hr()\n    ui.a(\n        \"Jeremy's GitHub\",\n        href=\"https://github.com/jfrummel/cintel-02-data\",\n        target=\"_blank\",\n    )\n\n# Main Content\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Table\", style=\"text-align: center;\")\n\n        @render.data_frame\n        def penguins_table():\n            return render.DataTable(\n                filtered_data(), selection_mode=\"row\", width=\"400px\", height=\"250px\"\n            )\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Grid\", style=\"text-align: center;\")\n\n        @render.data_frame\n        def penguins_grid():\n            return render.DataGrid(\n                filtered_data(),\n                filters=False,\n                selection_mode=\"row\",\n                width=\"400px\",\n                height=\"250px\",\n            )\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram\", style=\"text-align: center;\")\n\n        @render_widget\n        def plot_1():\n            histo = px.histogram(\n                filtered_data(),\n                x=input.selected_attribute_list(),\n                nbins=input.plotly_bin_count(),\n                color=\"species\",\n                \n            ).update_layout(\n                title={\"text\": \"Palmer Penguins\", \"x\": 0.5},\n                yaxis_title=\"Count\",\n                xaxis_title=input.selected_attribute_list(),\n            )\n\n            return histo\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Seaborn Histogram\", style=\"text-align: center;\")\n\n        @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")\n        def plot_2():\n            ax = sns.histplot(\n                filtered_data(),\n                x=input.selected_attribute_list(),\n                bins=input.seaborn_bin_count(),\n                hue=\"species\",\n                element=\"step\",\n                legend=True\n            )\n            ax.set_title(\"Palmer Penguins\")\n            ax.set_xlabel(input.selected_attribute_list())\n            ax.set_ylabel(\"Count\")\n            return ax\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Species\", style=\"text-align: center;\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            scatterplot = px.scatter(\n                filtered_data(), x=\"body_mass_g\", y=\"bill_length_mm\", color=\"species\"\n            ).update_layout(\n                title={\"text\": \"Bill Length vs Penguin Mass\"},\n                yaxis_title=\"Bill Length (mm)\",\n                xaxis_title=\"Body Mass (g)\",\n            )\n            return scatterplot\n\n\n# Defining Functions\n# ------------------\n# Define a function using the def keyword, followed by the function name, parentheses, and a colon.\n# The function name should describe what the function does.\n# In the parentheses, specify the inputs needed as arguments the function takes.\n\n\n# Decorators\n# ----------\n# Use the @ symbol to decorate a function with a decorator.\n# Decorators a concise way of calling a function on a function.\n# We don't typically write decorators, but we often use them.\n\n\n@reactive.calc\ndef filtered_data():\n    req(input.selected_species_list())\n    req(input.selected_islands_list())\n    req(input.selected_attribute_list())\n    isSpeciesMatch = penguins_df[\"species\"].isin(input.selected_species_list())\n    islandSelect = penguins_df[\"island\"].isin(input.selected_islands_list())\n    selectedAttribute = penguins_df[input.selected_attribute_list()]\n    return penguins_df[isSpeciesMatch & islandSelect & selectedAttribute]\n", "type": "text"}]